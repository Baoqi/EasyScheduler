/*
 * Copyright 2017 StreamSets Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package cn.escheduler.plugin.api;

import org.slf4j.Logger;

import java.util.List;

/**
 * Internal Base interface for Data Collector stages implementations defining their common context and lifecycle.
 */
public interface Stage<C extends Stage.Context> {

    /**
     * It provides information about the stage.
     */
    public interface Info {

        /**
         * Returns the name of the stage.
         * <p/>
         * This name is fixed at compile time and it does not change.
         * Different instances of the same stage have the same name.
         *
         * @return the name of the stage.
         */
        public String getName();

        /**
         * Returns the version of the stage.
         *
         * @return the version of the stage.
         */
        public int getVersion();

        /**
         * Returns the instance name of the stage.
         * <p/>
         * This name is assigned when a stage is added to a pipeline.
         * Different instances of the same stage have different instance name.
         *
         * @return the instance name of the stage.
         */
        public String getInstanceName();

        /**
         * Returns the label that user configured for this stage.
         * <p/>
         * The name is generated by user and can change between different pipeline runs. Different
         * stages can also share the same label.
         *
         * @return Stage label.
         */
        public String getLabel();

    }

    /**
     * Context to get information about user that started the pipeline or job.
     */
    public interface UserContext {

        /**
         * Return username of the user who started this pipeline or job.
         *
         * @return Human readable user name
         */
        public String getUser();


        /**
         * Returns the alias name of the user who started this pipeline or job.
         * @return Alias name
         */
        String getAliasName();

    }

    /**
     * Stage Context that provides runtime information and services to the stage.
     */
    public interface Context extends ConfigIssueContext, MetricContext {
        /**
         * Return value for given configuration option from data collector main configuration.
         *
         * Stages have their own namespace, so method won't be able to return generic SDC configuration.
         *
         * @param configName Configuration option name
         * @return String representation of the value or null if it's not defined.
         * @deprecated Use getConfiguration() instead.
         */
        @Deprecated
        public String getConfig(String configName);

        /**
         * Return configuration relevant to stages from the data collector main configuration files.
         *
         * Stages have their own namespace, so method won't be able to return generic SDC configuration.
         */
        public Configuration getConfiguration();

        /**
         * Return Logger of this stage
         */
        public Logger getLogger();

        /**
         * Return user context associated with currently running pipeline.
         *
         * @return UserContext for the current pipeline
         */
        public UserContext getUserContext();

        /**
         * Returns a {@link Info} of this stage.
         *
         * @return a {@link Info} of this stage.
         */
        public Info getStageInfo();

        /**
         * Reports an <code>Exception</code> as an error.
         *
         * @param exception the <code>Exception</code> to report as error.
         */
        public void reportError(Exception exception);

        /**
         * Reports an error using a non-localizable error message.
         *
         * @param errorMessage the non-localizable error message.
         */
        public void reportError(String errorMessage);

        /**
         * Reports an error using a localizable error code and arguments for it.
         *
         * @param errorCode the error code to report.
         * @param args the arguments for the <code>ErrorCode</code> message template.
         */
        public void reportError(ErrorCode errorCode, Object... args);

        /**
         * Indicates if the pipeline has been stopped while the stage is processing a batch of records.
         *
         * @return if the pipeline has been stopped or not.
         */
        public boolean isStopped();
    }

    /**
     * Initializes the stage.
     * <p/>
     * This method is called once when the pipeline is being initialized before the processing any data.
     * <p/>
     * If the stage returns an empty list of {@link ConfigIssue}s then the stage is considered ready to process data.
     * Else it is considered it is mis-configured or that there is a problem and the stage is not ready to process data,
     * thus aborting the pipeline initialization.
     *
     * @param info the stage information.
     * @param context the stage context.
     */
    public List<ConfigIssue> init(Info info, C context);

    /**
     * Destroys the stage. It should be used to release any resources held by the stage after initialization or
     * processing.
     * <p/>
     * This method is called once when the pipeline is being shutdown. After this method is called, the stage will not
     * be called to process any more data.
     * <p/>
     * This method is also called after a failed initialization to allow releasing resources created before the
     * initialization failed.
     */
    public void destroy();

}
